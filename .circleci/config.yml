version: 2.1

parameters:
  pkg-commit:
    type: string
    default: "master"
  dist-url:
    type: string
    default: "https://varnish-cache.org/downloads/varnish-7.4.2.tgz"
  dist-url-sha256:
    type: string
    default: ""
  configure_args:
    type: string
    default: |
        --with-contrib \
        --with-unwind \
        --enable-developer-warnings \
        --enable-debugging-symbols \
        --disable-stack-protector \
        --with-persistent-storage \
  build-pkgs:
    type: string
    default: ""

jobs:
  dist:
    description: Build or download varnish-x.y.z.tar.gz that is used later for the packaging jobs
    docker:
      - image: centos:7
    steps:
      - run:
          name: Install deps
          command: |
            yum install -y epel-release
            yum install -y \
                automake \
                jemalloc-devel \
                git \
                libedit-devel \
                libtool \
                libunwind-devel \
                make \
                pcre2-devel \
                python3 \
                python-sphinx
      - checkout
      - when:
          condition: << pipeline.parameters.dist-url >>
          steps:
            - run:
                name: Download the dist tarball
                command: |
                  curl -Ls '<< pipeline.parameters.dist-url >>' -o varnish-dist.tar.gz
            - when:
                condition: << pipeline.parameters.dist-url-sha256 >>
                steps:
                  - run:
                      name: Verify downloaded tarball
                      command: |
                        echo "<< pipeline.parameters.dist-url-sha256 >> varnish-dist.tar.gz" | sha256sum -c
            - run:
                name: Rename the dist tarball by parsed version
                command: |
                  mkdir parse-version-tmp
                  cd parse-version-tmp
                  tar xzf ../varnish-dist.tar.gz
                  VERSION=$(varnish-*/configure --version | awk 'NR == 1 {print $NF}')
                  cd ..
                  mv -v varnish-dist.tar.gz varnish-${VERSION}.tar.gz
      - persist_to_workspace:
          root: .
          paths:
            - varnish*.tar.gz
            - tools/*.suppr
            - .circleci
  tar_pkg_tools:
    description: Builds archives with the packaging tools from https://github.com/varnishcache/pkg-varnish-cache
    docker:
      - image: centos:7
    steps:
      - add_ssh_keys:
          fingerprints:
            - "11:ed:57:75:32:81:9d:d0:a4:5e:af:15:4b:d8:74:27"
      - run:
          name: Grab the pkg repo
          command: |
            yum install -y git
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            echo ${CIRCLE_REPOSITORY_URL}
            git clone https://github.com/varnishcache/pkg-varnish-cache.git .
            git checkout << pipeline.parameters.pkg-commit >>
            tar cvzf debian.tar.gz debian --dereference
            tar cvzf redhat.tar.gz redhat --dereference
            tar cvzf alpine.tar.gz alpine --dereference
      - persist_to_workspace:
          root: .
          paths:
            - debian.tar.gz
            - redhat.tar.gz
            - alpine.tar.gz
  package-varnish:
    parameters:
      platform:
        description: the Linux distribution, with release, e.g. debian:buster, centos:7
        type: string
      rclass:
        description: the resource class to use, usuall arm.medium or medium
        type: string
    machine:
      image: ubuntu-2004:202111-02
    resource_class: << parameters.rclass >>
    steps:
      - attach_workspace:
          at: ~/project

#      - when: &alpine_tweak
#          condition:
#            matches:
#              pattern: ^alpine.*
#              value: << parameters.platform >>
#          steps:
#            - run:
#                # https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.14.0#faccessat2
#                name: grab the latest docker version
#                command: |
#                  # using https://docs.docker.com/engine/install/ubuntu/
#                  sudo apt-get update
#                  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
#                  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
#                  case "<< parameters.rclass >>" in
#                      arm.*)  ARCH=arm64;;
#                      *)      ARCH=amd64;;
#                  esac
#                  echo \
#                    "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
#                      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#                  sudo apt-get update
#                  sudo apt-get install docker-ce docker-ce-cli containerd.io
      - run:
          name: Build for << parameters.platform >> on << parameters.rclass >>
          command: |
            mkdir -p src-tarballs
            case "<< parameters.platform >>" in
                debian:*|ubuntu:*)
                  EXT=deb
                  mkdir varnish-debian
                  cd varnish-debian
                  tar xavf ../debian.tar.gz --strip 1
                  cd -
                  ;;
                centos:*|fedora:*)  EXT=rpm ;;
                almalinux:*)        EXT=rpm ;;
                alpine:*)           EXT=apk ;;
                *)
                    echo "unrecognized platform: << parameters.platform >>"
                    exit 1
            esac

            case "<< parameters.platform >>" in
                centos:stream)      REPO=quay.io/centos/ ;;
                *)                  REPO= ;;
            esac

            case "<< parameters.rclass >>" in
                arm.*)              PARAM_ARCH=arm64 ;;
                *)                  PARAM_ARCH=amd64 ;;
            esac

            mkdir src-tarballs/varnish
            cp varnish-*.tar.gz src-tarballs/varnish

            docker run \
              --rm \
              -it \
              -e PARAM_DIST=$(echo "<< parameters.platform >>" | cut -d: -f1) \
              -e PARAM_RELEASE=$(echo "<< parameters.platform >>" | cut -d: -f2) \
              -e PARAM_ARCH=$PARAM_ARCH \
              -e PARAM_DIRECTORY="/workdir" \
              -v$(pwd):/workdir \
              -v$(pwd)/packages:/packages \
              --platform linux/$PARAM_ARCH \
              ${REPO}<< parameters.platform >> \
              /workdir/.circleci/make-$EXT-packages.sh
      - run:
          name: List created packages
          command: find ./packages -type f
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - "packages"

  package-vmod:
    parameters:
      platform:
        description: the Linux distribution, with release, e.g. debian:buster, centos:7
        type: string
      rclass:
        description: the resource class to use, usuall arm.medium or medium
        type: string
      vmod:
        description: vmod to package
        type: string
    machine:
      image: ubuntu-2004:202111-02
    resource_class: << parameters.rclass >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
#      - when: *alpine_tweak
      - run:
          name: Build for << parameters.platform >> on << parameters.rclass >>
          command: |
            case "<< parameters.platform >>" in
                debian:*|ubuntu:*)
                  EXT=deb
                  mkdir varnish-debian
                  cd varnish-debian
                  tar xavf ../debian.tar.gz --strip 1
                  cd -
                  ;;
                centos:*|fedora:*)  EXT=rpm ;;
                almalinux:*)        EXT=rpm ;;
                alpine:*)           EXT=apk ;;
                *)
                    echo "unrecognized platform: << parameters.platform >>"
                    exit 1
            esac

            case "<< parameters.platform >>" in
                centos:stream)      REPO=quay.io/centos/ ;;
                *)                  REPO= ;;
            esac

            case "<< parameters.rclass >>" in
                arm.*)              PARAM_ARCH=arm64 ;;
                *)                  PARAM_ARCH=amd64 ;;
            esac

            set -x
            docker run \
              --rm \
              -it \
              -e PARAM_DIST=$(echo "<< parameters.platform >>" | cut -d: -f1) \
              -e PARAM_RELEASE=$(echo "<< parameters.platform >>" | cut -d: -f2) \
              -e PARAM_DIRECTORY="/workdir/<< parameters.vmod >>/$EXT" \
              -e PARAM_ARCH=$PARAM_ARCH \
              -v$(pwd):/workdir \
              -v$(pwd)/packages:/deps \
              -v$(pwd)/new_packages:/packages \
              --platform linux/$PARAM_ARCH \
              ${REPO}<< parameters.platform >> \
              /workdir/.circleci/make-$EXT-packages-vmod.sh
            rm -rf $(pwd)/packages
            mv $(pwd)/new_packages $(pwd)/packages
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - "packages"

  check-packages:
    parameters:
      platform:
        description: the Linux distribution, with release, e.g. debian:buster, centos:7
        type: string
      rclass:
        description: the resource class to use, usuall arm.medium or medium
        type: string
    machine:
      image: ubuntu-2004:202111-02
    resource_class: << parameters.rclass >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
#      - when: *alpine_tweak
      - run:
          name: Build for << parameters.platform >> on << parameters.rclass >>
          command: |
            case "<< parameters.platform >>" in
                debian:*|ubuntu:*)
                  EXT=deb
                  mkdir varnish-debian
                  cd varnish-debian
                  tar xavf ../debian.tar.gz --strip 1
                  cd -
                  ;;
                centos:*|fedora:*)  EXT=rpm ;;
                almalinux:*)        EXT=rpm ;;
                alpine:*)           EXT=apk ;;
                *)
                    echo "unrecognized platform: << parameters.platform >>"
                    exit 1
            esac

            case "<< parameters.platform >>" in
                centos:stream)      REPO=quay.io/centos/ ;;
                *)                  REPO= ;;
            esac

            case "<< parameters.rclass >>" in
                arm.*)              PARAM_ARCH=arm64 ;;
                *)                  PARAM_ARCH=amd64 ;;
            esac

            set -x

            PARAM_DIST=$(echo "<< parameters.platform >>" | cut -d: -f1)
            PARAM_RELEASE=$(echo "<< parameters.platform >>" | cut -d: -f2)

            docker run \
              --rm \
              -it \
              -e PDIR=/packages/$PARAM_DIST/$PARAM_RELEASE/$PARAM_ARCH \
              -v$(pwd):/workdir \
              -v$(pwd)/packages:/packages \
              --platform linux/$PARAM_ARCH \
              ${REPO}<< parameters.platform >> \
              /workdir/.circleci/test-packages.sh

  collect_packages:
    docker:
      - image: centos:7
    steps:
      - attach_workspace:
          at: ~/project
      - run: ls -la ~/project/
      - run:
          name: Tar the packages
          command: |
              tar cvzf packages.tar.gz packages
      - store_artifacts:
          path: packages/
      - store_artifacts:
          destination: packages.tar.gz
          path: packages.tar.gz


workflows:
  version: 2
  packaging:
    jobs: &packaging_jobs
      - dist
      - tar_pkg_tools
      - package-varnish:
          name: << matrix.platform >> varnish packages (<< matrix.rclass >>)
          requires:
            - dist
            - tar_pkg_tools
          matrix:
            parameters: &matrix_params
              platform:
                - ubuntu:bionic
                - ubuntu:focal
                - ubuntu:jammy
                - debian:buster
                - debian:bullseye
                - debian:bookworm
                - centos:stream
                - almalinux:8
                - almalinux:9
                - fedora:latest
                - alpine:3
              rclass:
                - arm.medium
                - medium
      - package-vmod:
          name: << matrix.platform >> <<matrix.vmod>> packages (<< matrix.rclass >>)
          requires:
            - << matrix.platform >> varnish packages (<< matrix.rclass >>)
          matrix:
            parameters:
              <<: *matrix_params
              vmod:
                - varnish-modules
                - uuid
                - querystring

      - check-packages:
          name: check << matrix.platform >> packages (<< matrix.rclass >>)
          requires:
            - collect_packages
          matrix:
            parameters:
              <<: *matrix_params

      - collect_packages:
          requires:
            - package-varnish
            - package-vmod
